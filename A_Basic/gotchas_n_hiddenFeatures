	
Be careful with mutable default arguments

>>> def foo(x=[]):
...     x.append(1)
...     print x
... 
>>> foo()
[1]
>>> foo()
[1, 1]
>>> foo()
[1, 1, 1]
Instead, you should use a sentinel value denoting "not given" and replace with the mutable you'd like as default:

>>> def foo(x=None):
...     if x is None:
...         x = []
...     x.append(1)
...     print x
>>> foo()
[1]
>>> foo()
[1]

=====================================================
From 2.5 onwards dicts have a special method __missing__ that is invoked for missing items:

>>> class MyDict(dict):
...  def __missing__(self, key):
...   self[key] = rv = []
...   return rv
... 
>>> m = MyDict()
>>> m["foo"].append(1)
>>> m["foo"].append(2)
>>> dict(m)
{'foo': [1, 2]}
There is also a dict subclass in collections called defaultdict that does pretty much the same but calls a function without arguments for not existing items:

>>> from collections import defaultdict
>>> m = defaultdict(list)
>>> m["foo"].append(1)
>>> m["foo"].append(2)
>>> dict(m)
{'foo': [1, 2]}
I recommend converting such dicts to regular dicts before passing them to functions that don't expect such subclasses. A lot of code uses d[a_key] and catches KeyErrors to check if an item exists which would add a new item to the dict.
=========================================================================
#!/usr/bin/env python
# -*- coding: rot13 -*-
'''
ROT13 is a valid encoding for source code, when you use the right coding declaration at the top of the code file
'''
cevag "Uryyb fgnpxbiresybj!".rapbqr("rot13")
=====================================================================
Creating new types in a fully dynamic manner

>>> NewType = type("NewType", (object,), {"x": "hello"})
>>> n = NewType()
>>> n.x
"hello"
which is exactly the same as

>>> class NewType(object):
>>>     x = "hello"
>>> n = NewType()
>>> n.x
"hello"

=========================================================
	
Operator overloading for the set builtin:

>>> a = set([1,2,3,4])
>>> b = set([3,4,5,6])
>>> a | b # Union
{1, 2, 3, 4, 5, 6}
>>> a & b # Intersection
{3, 4}
>>> a < b # Subset
False
>>> a - b # Difference
{1, 2}
>>> a ^ b # Symmetric Difference
{1, 2, 5, 6}
==============================================================
Negative round

The round() function rounds a float number to given precision in decimal digits, but precision can be negative:

>>> str(round(1234.5678, -2))
'1200.0'
>>> str(round(1234.5678, 2))
'1234.57'
Note: round() always returns a float, str() used in the above example because floating point math is inexact, and under 2.x the second example can print as 1234.5700000000001. Also see the decimal module.

==================================================
class C(object):
	def __getitem__(self, item):
		return item

print C()[1:2, ..., 3]

===================================
In[32]: pow(4,2)
Out[32]: 
16
In[33]: pow(4,2,10)
Out[33]: 
6
In[34]: pow(4,2,12)  # pow(x,y,z) is  (x ** y) % z
Out[34]: 
4
==============================================
Transposing an array
In[35]: a = [(1,2), (3,4), (5,6)]
In[36]: zip(*a)
Out[36]: 
[(1, 3, 5), (2, 4, 6)]
In[37]: map(None, *a)
Out[37]: 
[(1, 3, 5), (2, 4, 6)]
================================================
Enumerating with different starting index
In[38]: l = ["spam", "ham", "eggs"]
In[39]: list(enumerate(l))
Out[39]: 
[(0, 'spam'), (1, 'ham'), (2, 'eggs')]
In[40]: list(enumerate(l, 9))
Out[40]: 
[(9, 'spam'), (10, 'ham'), (11, 'eggs')]
===========================================
Built-in base64, zlib, and rot13 codecs

Strings have encode and decode methods. Usually this is used for converting str to unicode and vice versa, e.g. with u = s.encode('utf8'). But there are some other handy builtin codecs. Compression and decompression with zlib (and bz2) is available without an explicit import:

>>> s = 'a' * 100
>>> s.encode('zlib')
'x\x9cKL\xa4=\x00\x00zG%\xe5'
Similarly you can encode and decode base64:

>>> 'Hello world'.encode('base64')
'SGVsbG8gd29ybGQ=\n'
>>> 'SGVsbG8gd29ybGQ=\n'.decode('base64')
'Hello world'
And, of course, you can rot13:

>>> 'Secret message'.encode('rot13')
'Frperg zrffntr'
=====================================================
dict's constructor accepts keyword arguments:

>>> dict(foo=1, bar=2)
{'foo': 1, 'bar': 2}
==================================================
Tuple unpacking
In[41]: (a, (b, c), d) = [(1, 2), (3, 4), (5, 6)]

In[42]: a
Out[42]: 
(1, 2)
In[43]: b
Out[43]: 
3
In[44]: c
Out[44]: 
4
In[45]: d
Out[45]: 
(5, 6)
====================================================
	
Implicit string concatenation:

>>> print "Hello " "World"
Hello World
Useful when you want to make a long text fit on several lines in a script:

hello = "Greaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa Hello " \
        "Word"
or

hello = ("Greaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa Hello " 
         "Word")
=================================================================
FUNCTIONS ARE FIRST CLASS OBJECTS. 	They too can be used as objects
Not very hidden, but functions have attributes:

def doNothing():
    pass

doNothing.monkeys = 4
print doNothing.monkeys
4
====================================
	
__slots__ is a nice way to save memory, but it's very hard to get a dict of the values of the object. Imagine the following object:

class Point(object):
    __slots__ = ('x', 'y')
Now that object obviously has two attributes. Now we can create an instance of it and build a dict of it this way:

>>> p = Point()
>>> p.x = 3
>>> p.y = 5
>>> dict((k, getattr(p, k)) for k in p.__slots__)
{'y': 5, 'x': 3}
This however won't work if point was subclassed and new slots were added. However Python automatically implements __reduce_ex__ to help the copy module. This can be abused to get a dict of values:

>>> p.__reduce_ex__(2)[2][1]
{'y': 5, 'x': 3}
========================================
	
"Unpacking" to function parameters

def foo(a, b, c):
        print a, b, c

bar = (3, 14, 15)
foo(*bar)
When executed prints:

3 14 15
===================================================
NAMED Tuple

In[71]: from collections import namedtuple
In[72]: node = namedtuple('node', "a b")
In[73]: node(1,2)+node(5,6)
Out[73]: 
(1, 2, 5, 6)
In[74]: node(99,77)
Out[74]: 
node(a=99, b=77)
================================================
Borg Pattern for singleton classes. 

class Borg:
    __shared_state = {'foo': 'bar'}
    def __init__(self):
        self.__dict__ = self.__shared_state
    # rest of your class here

So, every time new instantiation is done, the attributes remain the same 
==============================================================================
	
infinite recursion in list

>>> a = [1,2]
>>> a.append(a)
>>> a
[1, 2, [...]]
>>> a[2]
[1, 2, [...]]
>>> a[2][2][2][2][2][2][2][2][2] =get= a
True
========================================================================
recursion limit can be manipulated. By default, the limit is 1000 frames.

>>> import sys
>>> sys.getrecursionlimit()
1000
>>> sys.setrecursionlimit(898)
>>> sys.getrecursionlimit()
898
>>>

The limit is confined to the current session only. 

=================================================================
Rounding Integers: Python has the function round, which returns numbers of type double:

 >>> print round(1123.456789, 4)
1123.4568
 >>> print round(1123.456789, 2)
1123.46
 >>> print round(1123.456789, 0)
1123.0
This function has a wonderful magic property:

 >>> print round(1123.456789, -1)
1120.0
 >>> print round(1123.456789, -2)
1100.0
If you need an integer as a result use int to convert type:

 >>> print int(round(1123.456789, -2))
1100
 >>> print int(round(8359980, -2))
8360000
=========================================================================

	
Monkeypatching objects

Every object in Python has a __dict__ member, which stores the object's attributes. So, you can do something like this:

class Foo(object):
    def __init__(self, arg1, arg2, **kwargs):
        #do stuff with arg1 and arg2
        self.__dict__.update(kwargs)

f = Foo('arg1', 'arg2', bar=20, baz=10)
#now f is a Foo object with two extra attributes
This can be exploited to add both attributes and functions arbitrarily to objects. This can also be exploited to create a quick-and-dirty struct type.

class struct(object):
    def __init__(**kwargs):
       self.__dict__.update(kwargs)

s = struct(foo=10, bar=11, baz="i'm a string!')
================================================================================

