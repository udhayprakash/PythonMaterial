SQL INJECTION
==============

    username = request.GET['username']

    my_query = """
            SELECT * FROM users
            WHERE username = %s' """% username

    result = db_cursor.execute(my_query)


    PROBLEM
    ---------
    ''; UPDATE users SET is_superuser = true WHERE username = 'haxor'; --


    SOLUTION
    ---------
    my_query = """
            SELECT * FROM users
            WHERE username = %s' """

    result = db_cursor.execute(my_query, (name,)) # passing input with a placeholder

    For raw() and extra() sql queries, django will do that in the backend


MAIL HEADER INJECTION
======================
An email-sending form can be tricked into sending to unintended recipients


COMMAND INJECTION
==================
An application which triggers shell commands with user input as a parameter can be tricked shell commands with user
input as a parameter can e tricked into executing other, arbitrary shell commands
  Never invoke python's subprocess module with shell=True

XML INJECTION
==============
An XML processor is tricked into handling unsafe input (perhaps containing scripts, entity definitions which
expand to perform network requests or reveal contents of system files, etc.)

Almost anything which takes user input ad does something with that input --- potential source of injection






And, to avoid the misconfiguration, before going to production do,
    python manage.py check --deploy


Use https://requires.io to validate and check for dependencies in your requirements.txt


In prod, settings.py
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True

    # to stop javscript from accessing the cookies
    CSRF_COOOKIE_HTTPONLY = True
    SESSION_COOKIE_HTTPONLY = True

    # to avoid cross site scripting
    SECURE_BROWSER_XSS_FILTER = True













































































